### Data manipulation
library(dplyr)
library(gapminder)

## DPLYR
###THE FILTER VERB
#filter subset observations
head(gapminder)

str(gapminder)

gap_2007 <- filter(gapminder, year == 2007)
gap_2007


##using pipe operator

### Filter
# Filtering for one year
gapminder %>%
  filter(year == 2007)

#Filtering for India
gapminder %>%
  filter(country == "India")

# Filtering for one year and the country together
gapminder%>% 
  filter(year == 2007, country == "India")

### THE ARRANGE VERB
# arrange() sorts a table based on a variable
gapminder%>%
  arrange(gdpPercap)

# sorting in descending order
gapminder%>%
  arrange(desc(gdpPercap))

# filtering and then arranging
gapminder%>%
  filter(year == 2007) %>%
  arrange(desc(gdpPercap))

### Slice function
head(gapminder)
gapminder %>%
  slice(3:5) # (row,col)

gapminder %>%
  slice_head(n = 3)

gapminder %>%
  slice_tail(n = 3)

gapminder %>% 
  slice_sample(n = 5)

gapminder %>%
  slice_sample(prop = 0.1)

### THE MUTATE VERB
#  mutate() changes or adds variables

# changing a variable
gapminder %>%
  mutate(per = pop / 1000000000)

# adding a new variable
gapminder%>% 
  mutate(gdp = gdpPercap * pop)


# Combining all verbs
gdp_2007 <- gapminder%>%
  mutate(gdp = gdpPercap * pop)%>%
  filter(year == 2007)%>%
  arrange(desc(gdp))
gdp_2007

### Summarize verb
gapminder %>%
  filter(country == "United States", year ==2007)

gapminder %>%
  summarise(meanLifeExp = mean(lifeExp))

#summarizing one year
gapminder %>%
  filter(year ==2007) %>%
  summarise(meanLifeExp = mean(lifeExp), 
            medianLifeExp = median(lifeExp))

str(gapminder)
#Summarizing into multiple columns
gapminder %>%
  filter(year ==2007)%>%
  summarise(meanLifeExp = mean(lifeExp), 
            totalpop = sum(as.numeric(pop)))

str(gapminder)
#The group_by verb
### Summarizing by year
gapminder%>%
  group_by(year)%>%
  summarise(meanLifeExp = mean(lifeExp), 
            totalpop = sum(as.numeric(pop)))

### Summarizing by content
gapminder%>%
  filter(year == 2007)%>%
  group_by(year, continent)%>%
  summarise(meanLifeExp = mean(lifeExp), 
            totalpop = sum(as.numeric(pop)))

## Summerizing by content and year
gapminder%>%
  group_by(year, continent)%>%
  summarise(meanLifeExp = mean(lifeExp), 
            totalpop  = sum((pop)))

### Select
head(gapminder, 2)

gapminder%>%
  select(country:lifeExp)

gapminder %>%
  select(1:4)

gapminder%>%
  select(year:gdpPercap)

gapminder%>%
  select(3:6)

gapminder %>%
  select(country:continent, pop)

gapminder%>%
  select(-1:-2, -5)

gapminder%>%
  select(country, continent, pop)

gapminder%>%
  select(1, 2, 5)

gapminder %>%
  select(-pop)

gapminder%>%
  select(-5)

# There are  a number of helper functions you can use within select(), like starts_with(), 
#ends_with, matches() and contains().
# These let you quickly match larger blocks of variables that meet some criterion.

#DPLYR
library(dplyr)
# Filter()_function
s <- data.frame(name = c("sam", "jam", "ram", "mam"), 
                age = c(16, 13, 14, 15), ht = c(76, NA, NA, 67), 
                school = c("s", "m", "a", "n"))
s %>% filter(is.na(ht))
s %>% filter(!is.na(ht))


#arrange()_function
arrange(s, age)

#select()_function and rename()_function

#starts_with() , to print only age data
select(s, starts_with("age"))

#-starts_with() except age data
select(s, -starts_with("age"))

#printing column 1 to 2 
select(s, 1:2)

#printing data of column
#heading containing 'a'
select(s, contains("a"))

#print data of the column
#heading which matches 'na'
select(s, matches("na"))


#mutate() and transmute()
mutate(s, x1 = ht + age)
transmute(s, x1 = ht + age)

#summarise()
summarise(s, mean = mean(age))
summarise(s, mean = mean(ht))
summarise(s, med = min(age))
summarise(s, med = max(age))
summarise(s, median(age))

#sample_n() and sample_frac()
sample_n(s, 3)
sample_frac(s, 0.50)

library(dplyr)
library(gapminder)
gapminder

# Use gapminder data set and calculate mean and median by continent
gapminder%>%
  group_by(continent)%>%
  summarise(mean(lifeExp), median(lifeExp))



