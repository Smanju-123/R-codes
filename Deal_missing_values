#######################################################################
########################### Missing values ############################
#######################################################################

### Dealing with missing values
# vector with missing data
x <- c(1:4, NA, 6:7, NA)
x

# Check if we have NA's
is.na(x)

# data frame with missing data
df <- data.frame(col1 = c(1:3, NA), 
                 col2 = c("this", NA, "is", "text"), 
                 col3 = c(TRUE, FALSE, TRUE, TRUE), 
                 col4 = c(2.5, 4.3, 2.3, NA), 
                 stringsAsFactors = FALSE)
df

# identify NAs in full data.frame
is.na(df)

#identify NAs in specific dataframe column
is.na(df$col4)

# identify location of NAs in vector
which(is.na(x))

# identify count of NAs in data frame
sum(is.na(df))

### For data frames, a convinient shortcut to compute
# in each column is to use colSums()
colSums(is.na(df))

##################
# recode missing values with the mean
#vector with missing data
x <- c(1:4, NA, 6:7, NA)
x
x[is.na(x)]
mean(x, na.rm = TRUE)
x[is.na(x)] <- mean(x, na.rm = TRUE)
x

round(x, 2)

# data frame that codes missing values as 99
df <- data.frame(col1 = c(1:3, 99), col2 = c(2.5, 4.2, 99, 3.2))
df

# change 99s to NA
df[df == 99]
df[df == 99] <- NA
df

# data frame with missing data
df <- data.frame(col1 = c(1:3, NA), 
                 col2 = c("this", NA, "is", "text"), 
                 col3 = c(TRUE, FALSE, TRUE, TRUE), 
                 col4 = c(2.5, 4.3, 2.3, NA), 
                 stringsAsFactors = FALSE)
df

# replace NA in fourth column and replace it with mean value
mean(df$col4, na.rm = TRUE)
df$col4[is.na(df$col4)] <- mean(df$col4, na.rm = TRUE)
df

###########################
# Exclude missing values
# A vector with missing values
x <- c(1:4, NA, 6:7, NA)

# We may also desire to subset our data to obtain complete observations, 
# those observations (rows) in our data that contain no missing data.
# We can do this a few different ways. 

# data frame with missing values
df <- data.frame(col1 = c(1:3, NA), 
                 col2 = c("this", NA, "is", "text"), 
                 col3 = c(TRUE, FALSE, TRUE, TRUE), 
                 col4 = c(2.5, 4.3, 2.3, NA), 
                 stringsAsFactors = FALSE)
df
complete.cases(df)
#subset with complete.cases to get complete cases
df[complete.cases(df), ]

# or subset with '!' operator to get incomplete cases
df[!complete.cases(df), ]

# load data
data <- iris
####################################################################
##### MICE (Multivariate Imputation via Chained Equations)
## Creating multiple imputations as compared to a single imputation
# (such as mean) takes care of uncertainity in missing values.

## MICE assumes that the missing data Missing at Random (MAR), which means
# that the probability that a value is missing depends only on observed value
# and can be predicted using them. It imputes data on a variable by variable
# basis by specifying an imputation model per variable.

## Suppose we have X1, X2..Xk variables. If x1 has missing values, then it 
# will be regressed on other variable X2 to Xk. The missing values in X1 will
# be then replaced by predictive values obtained. Similarly if X2 has missing 
#values, then X1, X3 to Xk variables will be used in prediction model as 
# independent variables. Later, missing values will be replaced with predicted
# values

## By dafault, linear regression is used to predict continous missing values.
# Logistic regression is used for categorical missing values. Once this cycle
# is complete, multiple data sets are generated. These data sets differ only in
# imputed missing values. Generally it's considered to be good practice to
# build models on these data sets seperately and combining their results.

## Precisely, the methods used by this package are:
#1. PPM (Predictive Mean Matching) - For numeric variables
#2. logreg(Logistic Regression) - For Binary variables( eith 2 levels)
#3. polyreg(Bayesian polytomous regression) - For Factor variables (>= 2 levels)
#4. Prpportional odds model (orderd, >= levels)

# Get summary
summary(iris)
sum(is.na(iris))

# Generating 10% missing values at Random
library(missForest)
iris.mis <- prodNA(iris, noNA = 0.1)
sum(is.na(iris.mis))

# Remove categorical data
iris
iris.mis <- subset(iris.mis, select = -c(Species))
summary(iris.mis)
head(iris.mis, 17)

library(mice)
imputed_Data <- mice(iris.mis, m = 5, maxit = 50, method = 'pmm', seed = 500)
summary(imputed_Data)

## Here is an explanation of the parameters used:
# m - Refers to 5 imputed data sets
# maxit - Refers to no. of iterations taken to impute missing values
